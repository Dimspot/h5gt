language: cpp

# python wrapper needs shared dependencies!

matrix:
  include:
    # MPI 3.1
    - os: linux
      dist: focal
      compiler: gcc
      env:
        - H5GT_USE_EIGEN=True
        - H5GT_USE_XTENSOR=False
        - H5GT_USE_OPENCV=False
        - H5GT_BUILD_TESTS=True
        - H5GT_EXAMPLES=True
        - HDF5_PREFER_PARALLEL=True
        - H5GT_BUILD_h5gtpy=True
        - HDF5_RUNTIME_DIR=""
        - COPY_H5GTPY_RUNTIME_DEPS=True
        - HDF5_USE_STATIC_LIBRARIES=False
        - CMAKE_GENERATOR="Ninja"
        - TESTS_TARGET="test"
        - PYTEST_COMMAND="python -m unittest discover h5gtpy.tests"
      addons:
        apt:
          packages:
            - libhdf5-mpi-dev
            - ninja-build

    # MPICH 3.1
    - os: linux
      dist: focal
      compiler: clang
      env:
        - H5GT_USE_EIGEN=True
        - H5GT_USE_XTENSOR=False
        - H5GT_USE_OPENCV=False
        - H5GT_BUILD_TESTS=True
        - H5GT_EXAMPLES=True
        - HDF5_PREFER_PARALLEL=True
        - H5GT_BUILD_h5gtpy=True
        - HDF5_RUNTIME_DIR=""
        - COPY_H5GTPY_RUNTIME_DEPS=True
        - HDF5_USE_STATIC_LIBRARIES=False
        - CMAKE_GENERATOR="Ninja"
        - TESTS_TARGET="test"
        - PYTEST_COMMAND="python -m unittest discover h5gtpy.tests"
      addons:
        apt:
          packages:
            - libhdf5-mpich-dev
            - ninja-build

    # OpenMPI 3.1
    - os: linux
      dist: focal
      compiler: clang
      env:
        - H5GT_USE_EIGEN=True
        - H5GT_USE_XTENSOR=False
        - H5GT_USE_OPENCV=False
        - H5GT_BUILD_TESTS=True
        - H5GT_EXAMPLES=True
        - HDF5_PREFER_PARALLEL=True
        - H5GT_BUILD_h5gtpy=True
        - HDF5_RUNTIME_DIR=""
        - COPY_H5GTPY_RUNTIME_DEPS=False
        - HDF5_USE_STATIC_LIBRARIES=False
        - CMAKE_GENERATOR="Ninja"
        - TESTS_TARGET="test"
        - PYTEST_COMMAND="python -m unittest discover h5gtpy.tests"
      addons:
        apt:
          packages:
            - libhdf5-openmpi-dev
            - ninja-build

    - os: windows
      env:
        - H5GT_USE_EIGEN=True
        - H5GT_USE_XTENSOR=True
        - H5GT_USE_OPENCV=True
        - H5GT_BUILD_TESTS=True
        - H5GT_EXAMPLES=True
        - HDF5_PREFER_PARALLEL=False
        - H5GT_BUILD_h5gtpy=True
        - HDF5_RUNTIME_DIR="C:/Tools/miniconda3/Library/bin"
        - COPY_H5GTPY_RUNTIME_DEPS=True
        - HDF5_USE_STATIC_LIBRARIES=False
        - CMAKE_GENERATOR="Visual Studio 15 2017 Win64"
        - TESTS_TARGET="RUN_TESTS"
        - PYTEST_COMMAND="python -m unittest discover h5gtpy.tests"

    - os: windows
      env:
        - H5GT_USE_EIGEN=True
        - H5GT_USE_XTENSOR=True
        - H5GT_USE_OPENCV=True
        - H5GT_BUILD_TESTS=True
        - H5GT_EXAMPLES=True
        - HDF5_PREFER_PARALLEL=False
        - H5GT_BUILD_h5gtpy=True
        - HDF5_RUNTIME_DIR="C:/Tools/miniconda3/Library/bin"
        - COPY_H5GTPY_RUNTIME_DEPS=False
        - HDF5_USE_STATIC_LIBRARIES=False
        - CMAKE_GENERATOR="Visual Studio 15 2017 Win64"
        - TESTS_TARGET="RUN_TESTS"
        - PYTEST_COMMAND="python -m unittest discover h5gtpy.tests"

    - os: osx
      osx_image: xcode12.2
      compiler: clang
      env:
        - H5GT_USE_EIGEN=True
        - H5GT_USE_XTENSOR=True
        - H5GT_USE_OPENCV=True
        - H5GT_BUILD_TESTS=True
        - H5GT_EXAMPLES=True
        - HDF5_PREFER_PARALLEL=False
        - H5GT_BUILD_h5gtpy=True
        - HDF5_RUNTIME_DIR="/Users/travis/miniconda/bin"
        - COPY_H5GTPY_RUNTIME_DEPS=False
        - HDF5_USE_STATIC_LIBRARIES=False
        - CMAKE_GENERATOR="Ninja"
        - TESTS_TARGET="test"
        - PYTEST_COMMAND="python -m unittest discover h5gtpy.tests"

env:
  global:
  - EIGEN3_SRC=${TRAVIS_BUILD_DIR}/../eigen   # in general only for header only lib `_SRC` dir is same as `_ROOT`
  - EIGEN3_ROOT=${TRAVIS_BUILD_DIR}/../eigen

before_install:
  - git clone --branch 3.4.0 https://gitlab.com/libeigen/eigen.git $EIGEN3_SRC

  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then 
      choco install --yes miniconda3;
      source C:/Tools/miniconda3/Scripts/activate;
      conda config --set always_yes yes --set changeps1 no;
      conda update -q conda;
      conda install -c conda-forge mamba;
      mamba install -c conda-forge xtl xsimd xtensor libopencv opencv zlib hdf5;
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then 
      wget "http://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh" -O miniconda.sh;
      bash miniconda.sh -b -p $HOME/miniconda;
      conda create --name py37 python=3.7;
      conda activate py37;
      hash -r;
      conda config --set always_yes yes --set changeps1 no;
      conda update -q conda;
      conda install -c conda-forge mamba;
      mamba install -c conda-forge xtl xsimd xtensor libopencv opencv zlib hdf5 ninja;
    fi

before_script:
  - if [[ "$TRAVIS_COMPILER" == "gcc" ]]; then 
      gcc --version;
    elif [[ "$TRAVIS_COMPILER" == "clang" ]]; then 
      clang --version;
    fi
  - cmake --version
  - python --version
  - mkdir ${TRAVIS_BUILD_DIR}/../install

script:
  - cd ${TRAVIS_BUILD_DIR}
  - mkdir -p build && pushd build
  - >
    cmake --warn-uninitialized --debug-output
    -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
    -DEigen3_ROOT:PATH=$EIGEN3_ROOT 
    -DH5GT_USE_EIGEN:BOOL=${H5GT_USE_EIGEN}
    -DH5GT_USE_XTENSOR:BOOL=${H5GT_USE_XTENSOR}
    -DH5GT_USE_OPENCV:BOOL=${H5GT_USE_OPENCV}
    -DH5GT_UNIT_TESTS:BOOL=${H5GT_BUILD_TESTS}
    -DH5GT_EXAMPLES:BOOL=${H5GT_EXAMPLES}
    -DHDF5_PREFER_PARALLEL:BOOL=${HDF5_PREFER_PARALLEL}
    -DH5GT_BUILD_h5gtpy=${H5GT_BUILD_h5gtpy}
    -DHDF5_RUNTIME_DIR=${HDF5_RUNTIME_DIR}
    -DCOPY_H5GTPY_RUNTIME_DEPS=${COPY_H5GTPY_RUNTIME_DEPS}
    -DHDF5_USE_STATIC_LIBRARIES=${HDF5_USE_STATIC_LIBRARIES}  
    -G "${CMAKE_GENERATOR}" ../
  - cmake --build . --config Release -j
  - CTEST_OUTPUT_ON_FAILURE=1 cmake --build . --target ${TESTS_TARGET} --config Release
  - cmake --install . --prefix ../install --config Release
  - ${PYTEST_COMMAND}
  # - popd
  # - bash tests/test_project_integration.sh;
