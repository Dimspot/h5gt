# Adapted from various sources, including:
# - Louis Dionne's Hana: https://github.com/ldionne/hana
# - Paul Fultz II's FIT: https://github.com/pfultz2/Fit
# - Eric Niebler's range-v3: https://github.com/ericniebler/range-v3
# - Gabi Melman spdlog: https://github.com/gabime/spdlog

sudo: required
language: cpp

# the install step will take care of deploying a newer cmake version
# install:
#   CMAKE_URL="http://www.cmake.org/files/v3.19/cmake-3.19.0-rc1-Linux-x86_64.tar.gz" &&
#   mkdir cmake_dir && travis_retry wget --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake_dir &&
#   export PATH=${DEPS_DIR}/cmake_dir/bin:${PATH}

# before_script:
#   # create a build folder for the out-of-source build
#   - mkdir build
#   # switch to build directory
#   - cd build
#   # run cmake; here we assume that the project's
#   # top-level CMakeLists.txt is located at '..'
#   - cmake ..

# script:
#   # once CMake has done its job we just build using make as usual
#   - make
#   # if the project uses ctest we can run the tests like this
#   - make test

addons: &gcc7
  apt:
    packages:
      - g++-7
      - libboost-all-dev
      - libhdf5-openmpi-dev
      - libeigen3-dev
      - ninja-build
    sources:
      - ubuntu-toolchain-r-test

addons: &clang6
  apt:
    packages:
      - clang-6.0
      - libboost-all-dev
      - libhdf5-openmpi-dev
      - libeigen3-dev
      - ninja-build
    sources:
      - ubuntu-toolchain-r-test
      - llvm-toolchain-xenial-6.0

addons: &clang7
  apt:
    packages:
      - clang-7
      - libboost-all-dev
      - libhdf5-openmpi-dev
      - libeigen3-dev
      - ninja-build
    sources:
      - ubuntu-toolchain-r-test
      - llvm-toolchain-xenial-7

matrix:
  include:
    # Older linux (trusty) with default gcc
    # Install serial hdf5 + build serial
    - os: linux
      dist: trusty
      env:
        - H5GT_USE_XTENSOR=False
        - H5GT_USE_OPENCV=False
        - H5GT_PARALLEL_HDF5=False
        - IS_BASE_ENVIRON=1
      addons:
        apt:
          packages:
            - libboost-all-dev
            - libeigen3-dev
            - libhdf5-serial-dev
            - ninja-build

    # Linux gcc-7
    # Install parallel hdf5 + build parallel
    - os: linux
      dist: xenial
      env:
        - GCC_VERSION=7
        - H5GT_USE_XTENSOR=True
        - H5GT_USE_OPENCV=False
        - H5GT_PARALLEL_HDF5=True
      addons: *gcc7

    # Linux clang-6.0
    # Install parallel hdf5 + build serial
    - os: linux
      dist: xenial
      env:
        - CLANG_VERSION=6.0
        - H5GT_PARALLEL_HDF5=False
      addons: *clang6

    # Linux clang-7
    # Install parallel hdf5, build parallel
    - os: linux
      dist: xenial
      env:
        - CLANG_VERSION=7
        - H5GT_USE_XTENSOR=True
        - H5GT_USE_OPENCV=False
        - H5GT_PARALLEL_HDF5=True
      addons: *clang7

    # Mac OSX XCode 10
    - os: osx
      osx_image: xcode10.3
      env:
        - H5GT_USE_XTENSOR=True
        - H5GT_USE_OPENCV=True
        - H5GT_PARALLEL_HDF5=False

    # Mac OSX XCode 11
    - os: osx
      osx_image: xcode11.3
      env:
        - H5GT_USE_XTENSOR=True
        - H5GT_USE_OPENCV=True
        - H5GT_PARALLEL_HDF5=False
        - BREW_USE_LATEST=1

    # Windows
    - os: windows
      env:
        - H5GT_USE_XTENSOR=True
        - H5GT_USE_OPENCV=True
        - H5GT_PARALLEL_HDF5=False

env:
  global:
    - MINCONDA_VERSION="latest"
    - MINCONDA_LINUX="Linux-x86_64"
    - MINCONDA_OSX="MacOSX-x86_64"

install:
  - export HOMEBREW_NO_AUTO_UPDATE=1  # for reproducibility, dont autoupdate

  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      MINCONDA_OS=$MINCONDA_LINUX;
      CMAKE_URL="http://www.cmake.org/files/v3.19/cmake-3.19.0-rc1-Linux-x86_64.tar.gz";
      mkdir cmake_dir; 
      travis_retry wget --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake_dir;
      export PATH=${DEPS_DIR}/cmake_dir/bin:${PATH};
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      if [ "$BREW_USE_LATEST" ]; then
        brew update;
        brew install hdf5; brew upgrade hdf5;
      fi;
      brew install boost hdf5 eigen ninja;
      MINCONDA_OS=$MINCONDA_OSX;
    fi

  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      export CMAKE_GENERATOR="Visual Studio 16 2019 Win64" ;
      export TESTS_TARGET="RUN_TESTS";
      choco install --yes miniconda3 ;
      source C:/Tools/miniconda3/Scripts/activate ;
    else
      export CMAKE_GENERATOR="Ninja" ;
      export TESTS_TARGET="test";
      wget "http://repo.continuum.io/miniconda/Miniconda3-$MINCONDA_VERSION-$MINCONDA_OS.sh" -O miniconda.sh;
      bash miniconda.sh -b -p $HOME/miniconda ;
      source $HOME/miniconda/bin/activate;
      hash -r ;
    fi
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda install -c conda-forge mamba
  - if [[ "$H5GT_USE_XTENSOR" == "True" ]]; then
      mamba install -c conda-forge xtl xsimd xtensor;
    fi
  - if [[ "$H5GT_USE_OPENCV" == "True" ]]; then
      mamba install -c conda-forge libopencv opencv;
    fi
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      mamba install -c conda-forge boost-cpp hdf5 eigen;
    fi

before_script:
  - if [ -n "$GCC_VERSION" ]; then export CXX="g++-${GCC_VERSION}" CC="gcc-${GCC_VERSION}"; fi
  - if [ -n "$CLANG_VERSION" ]; then export CXX="clang++-${CLANG_VERSION}" CC="clang-${CLANG_VERSION}"; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export CXX="clang++" CC="clang"; fi
  - which $CXX
  - which $CC
  - $CXX --version
  - ${DEPS_DIR}/cmake_dir/bin/cmake --version

script:
  - cd ${TRAVIS_BUILD_DIR}
  - mkdir -p build && pushd build
  - >
    ${DEPS_DIR}/cmake_dir/bin/cmake --warn-uninitialized --debug-output
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
    -DH5GT_TEST_SINGLE_INCLUDES:BOOL=ON
    -DH5GT_PARALLEL_HDF5:BOOL=${H5GT_PARALLEL_HDF5}
    -DH5GT_USE_EIGEN:BOOL=ON
    -DH5GT_USE_XTENSOR:BOOL=${H5GT_USE_XTENSOR}
    -DH5GT_USE_OPENCV:BOOL=${H5GT_USE_OPENCV}
    -G "${CMAKE_GENERATOR}" ../
  - ${DEPS_DIR}/cmake_dir/bin/cmake --build .
  - CTEST_OUTPUT_ON_FAILURE=1 ${DEPS_DIR}/cmake_dir/bin/cmake --build . --target ${TESTS_TARGET}
  - popd
  - if [ $IS_BASE_ENVIRON ]; then
      bash tests/test_project_integration.sh;
    fi